<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:os-core="http://www.openspaces.org/schema/core"
	xmlns:os-events="http://www.openspaces.org/schema/events"
	xmlns:os-remoting="http://www.openspaces.org/schema/remoting"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/10.0/core/openspaces-core.xsd
       http://www.openspaces.org/schema/events http://www.openspaces.org/schema/10.0/events/openspaces-events.xsd
       http://www.openspaces.org/schema/remoting http://www.openspaces.org/schema/10.0/remoting/openspaces-remoting.xsd">

	<!-- Spring property configurer which allows us to use system properties 
		(such as user.name). -->
	<bean id="propertiesConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />

	<!-- Enables the usage of @GigaSpaceContext annotation based injection. -->
	<os-core:giga-space-context />

	<!-- A JDBC pooled data source that connects to the HSQL server the mirror 
		starts. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test" />
		<property name="username" value="setu" />
		<property name="password" value="password" />
	</bean>

	<!-- Hibernate SessionFactory bean. Uses the pooled data source to connect 
		to the database. -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>com.smartstream.common.Data</value>
				<value>com.smartstream.common.SubData</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">false</prop>
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>


	<bean id="hibernateDataSource"
		class="org.openspaces.persistency.hibernate.StatelessHibernateExternalDataSource">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="initialLoadEntries">
			<value>com.smartstream.common.Data</value>
		</property>
		<property name="initialLoadChunkSize" value="2000" />
	</bean>

	<!-- A bean representing a space (an IJSpace implementation). Note, we do 
		not specify here the cluster topology of the space. It is declated outside 
		of the processing unit or within the SLA bean. The space is configured to 
		connect to a mirror, and uses the configured external data source to perform 
		the initial load operation from the database when the Space starts up. -->
	<os-core:space id="space" url="/./space" schema="persistent"
		mirror="true" external-data-source="hibernateDataSource">
		<os-core:properties>
			<props>
				<!-- Use ALL IN CACHE -->
				<prop key="space-config.engine.cache_policy">1</prop>
				<prop key="space-config.external-data-source.usage">read-only</prop>
				<prop key="cluster-config.cache-loader.external-data-source">true</prop>
				<prop key="cluster-config.cache-loader.central-data-source">true</prop>
			</props>
		</os-core:properties>
	</os-core:space>

	<os-core:annotation-support />

	<!-- Defines a distributed transaction manager. -->
	<os-core:distributed-tx-manager id="transactionManager" />

	<!-- OpenSpaces simplified space API built on top of IJSpace/JavaSpace. -->
	<os-core:giga-space id="gigaSpace" space="space"
		tx-manager="transactionManager" />

</beans>